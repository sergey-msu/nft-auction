;; NFT auction smart contract


int min_gas_amount() asm "50000000 PUSHINT"; ;; 0.05 TON
int min_tons_for_storage() asm "100000000 PUSHINT"; ;; 0.1 TON
int transfer_invoke_fee() asm "50000000 PUSHINT"; ;; 0.05 TON


(slice, slice, slice, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; marketplace_address 
    ds~load_msg_addr(), ;; nft_address
    ds~load_msg_addr(), ;; nft_owner_address
    ds~load_ref(),      ;; marketplace_fee_params
    ds~load_ref(),      ;; royalty_params
    ds~load_ref()       ;; auction_params
  );
}


(int, int, int, int, int, int, int, slice, int, int, int) load_auction_data(cell auction_params, int initialized?) inline {
  var ds = auction_params.begin_parse();
  return (
    ds~load_nullable_uint(32), ;; auction_finish_time
    ds~load_uint(32),          ;; auction_salt
    ds~load_uint(32),          ;; sniper_before_time (min)
    ds~load_uint(32),          ;; sniper_after_prolong (min)
    ds~load_coins(),           ;; min_bid_value
    ds~load_nullable_coins(),  ;; max_bid_value
    ds~load_coins(),           ;; bid_step_value
    initialized? ? ds~load_nullable_msg_addr() : null(), ;; curr_winner_address
    initialized? ? ds~load_coins() : 0, ;; curr_winner_bid
    initialized? ? ds~load_int(1) : 0,  ;; is_finished
    initialized? ? ds~load_int(1) : 0  ;; is_cancelled
  );
}


(slice, int, int) load_fees(cell fee_params) inline {
  var ds = fee_params.begin_parse();
  return (
    ds~load_msg_addr(), ;; fee_address 
    ds~load_uint(16),   ;; fee_numer
    ds~load_uint(16)    ;; fee_denom
  );
}


() save_data(slice marketplace_address, slice nft_address, slice nft_owner_address,
             cell marketplace_fee_params, cell royalty_params,
             int auction_finish_time, int auction_salt, int sniper_before_time, int sniper_after_prolong,
             int min_bid_value, int max_bid_value, int bid_step_value,
             slice curr_winner_addr,
             int curr_winner_bid,
             int finished?,
             int cancelled?) impure inline {

  cell auction_params = begin_cell()
                          .store_nullable_uint(auction_finish_time, 32)
                          .store_uint(auction_salt, 32)
                          .store_uint(sniper_before_time, 32)
                          .store_uint(sniper_after_prolong, 32)
                          .store_coins(min_bid_value)
                          .store_nullable_coins(max_bid_value)
                          .store_coins(bid_step_value)
                          .store_nullable_msg_addr(curr_winner_addr)
                          .store_coins(curr_winner_bid)
                          .store_int(finished?, 1)
                          .store_int(cancelled?, 1)
                        .end_cell();

  set_data(begin_cell()
            .store_slice(marketplace_address)
            .store_slice(nft_address)
            .store_slice(nft_owner_address)
            .store_ref(marketplace_fee_params)
            .store_ref(royalty_params)
            .store_ref(auction_params)
          .end_cell());
}


() return_bid_to_bidder(slice bidder_address, int bid_value) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce
    .store_slice(bidder_address)
    .store_coins(bid_value)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
  .end_cell();

  send_raw_message(msg, 1); ;; carry all inbound amount minus fees

  return ();
} 


() return_bid_to_sender(slice sender_address) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce
    .store_slice(sender_address)
    .store_coins(0)  ;; use 64 flag below
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
  .end_cell();

  send_raw_message(msg, 66); ;; carry all inbound amount minus fees + ignore errors

  return ();
}


() finish_auction(int my_balance, int fwd_fee, int query_id,
                  slice marketplace_address, slice nft_address, slice nft_owner_address,
                  cell marketplace_fee_params, cell royalty_params,
                  int auction_finish_time, int auction_salt, int sniper_before_time, int sniper_after_prolong,
                  int min_bid_value, int max_bid_value, int bid_step_value,
                  slice winner_address, int winner_bid, 
                  int finished?) impure {
  int rest_amount = my_balance - min_gas_amount() - min_tons_for_storage() - transfer_invoke_fee() - fwd_fee;
  throw_unless(800, rest_amount > 0);

  ;; if there is a winner: pay fees
  if (~ null?(winner_address)) {
    var (royalty_addr, royalty_numer, royalty_denom) = load_fees(royalty_params);
    int royalty_amount = (winner_bid / royalty_denom) * royalty_numer;

    var (marketplace_fee_addr, marketplace_fee_numer, marketplace_fee_denom) = load_fees(marketplace_fee_params);
    int marketplace_fee = (winner_bid / marketplace_fee_denom) * marketplace_fee_numer;

    rest_amount -= (royalty_amount + marketplace_fee + 3 * fwd_fee);
    throw_unless(801, rest_amount > 0);

    ;; royalty fees
    var royalty_msg = begin_cell()
                        .store_uint(0x10, 6) ;; nobounce
                        .store_slice(royalty_addr)
                        .store_coins(royalty_amount)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                      .end_cell();

    send_raw_message(royalty_msg, 1);

    ;; marketplace fees
    var marketplace_msg = begin_cell()
                            .store_uint(0x10, 6) ;; nobounce
                            .store_slice(marketplace_fee_addr)
                            .store_coins(marketplace_fee)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                          .end_cell();

    send_raw_message(marketplace_msg, 1);

    ;; send winner's bid to NFT owner
    var owner_msg = begin_cell()
                      .store_uint(0x10, 6) ;; nobounce
                      .store_slice(nft_owner_address)
                      .store_coins(rest_amount)
                      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .end_cell();

    send_raw_message(owner_msg, 1);
  }

  slice new_nft_owner = null?(winner_address) ? nft_owner_address : winner_address;

  ;; transfer NFT to new (or the same in case of no bids) owner,
  var msg = begin_cell()
              .store_uint(0x18, 6) 
              .store_slice(nft_address)
              .store_coins(transfer_invoke_fee())
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::transfer(), 32)
              .store_uint(query_id, 64)
              .store_slice(new_nft_owner) ;; new_owner_address
              .store_uint(0, 2) ;; response_address
              .store_int(0, 1)  ;; empty custom_payload
              .store_coins(0)   ;; forward amount to old_owner_address
              .store_int(0, 1)  ;; empty forward_payload
            .end_cell();

  send_raw_message(msg, 1);

  save_data(marketplace_address, nft_address, new_nft_owner,
            marketplace_fee_params, royalty_params,
            auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
            min_bid_value, max_bid_value, bid_step_value,
            winner_address,
            winner_bid,
            -1, 0);

  return ();
}


() bid(int my_balance, int msg_value, int fwd_fee, int query_id,
       slice marketplace_address, slice nft_address, slice nft_owner_address, 
       cell marketplace_fee_params, cell royalty_params,
       slice sender_address,
       int auction_finish_time, int auction_salt, int sniper_before_time, int sniper_after_prolong,
       int min_bid_value, int max_bid_value, int bid_step_value,
       slice curr_winner_addr, int curr_winner_bid,
       int finished?) impure {
  int bid_value = msg_value - min_gas_amount();

  throw_unless(450, bid_value >= min_bid_value);

  int curr_bid = max(min_bid_value, curr_winner_bid);
  ;; return all amount to sender due to infufficient bid or in case of finished auction
  if (finished? |  ;; finished
      ((bid_value < curr_bid) & null?(curr_winner_addr)) | ;; first bid ever
      ((bid_value <= curr_bid + bid_step_value) & (~ null?(curr_winner_addr)))) {  ;; non-first bid 
    return_bid_to_sender(sender_address);
    return ();
  }

  ;; max bid occured: finish auction immediately
  int max_bid? = null?(max_bid_value) ? 0 : (bid_value >= max_bid_value);
  if (max_bid?) {
    finish_auction(my_balance, fwd_fee, query_id,
                   marketplace_address, nft_address, nft_owner_address,
                   marketplace_fee_params, royalty_params,
                   auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
                   min_bid_value, max_bid_value, bid_step_value,
                   sender_address, bid_value, 
                   finished?);

    return();
  }

  ;; (curr_winner_bid < bid_value < max_bid_value): do next bid
  ;; return previous bid to bidder (if any)
  if (~ null?(curr_winner_addr)) {
    return_bid_to_bidder(curr_winner_addr, curr_winner_bid - fwd_fee);
  }

  ;; anti-sniping
  int sniper? = ((null?(sniper_before_time) & null?(sniper_after_prolong)) | null?(auction_finish_time)) ? 
                0 :
                (now() > auction_finish_time - sniper_before_time);
  if (sniper?) {
      auction_finish_time += sniper_after_prolong;
  }

  save_data(marketplace_address, nft_address, nft_owner_address,
            marketplace_fee_params, royalty_params,
            auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong, 
            min_bid_value, max_bid_value, bid_step_value,
            sender_address, bid_value,
            0, 0);

  return ();
}


() cancel_auction(int my_balance, fwd_fee, int query_id,
                  slice marketplace_address, slice nft_address, slice nft_owner_address,
                  cell marketplace_fee_params, cell royalty_params,
                  int auction_finish_time, int auction_salt, int sniper_before_time, int sniper_after_prolong,
                  int min_bid_value, int max_bid_value, int bid_step_value,
                  slice curr_winner_addr, int curr_winner_bid,
                  int finished?) impure {
  int rest_amount = my_balance - min_gas_amount() - min_tons_for_storage() - transfer_invoke_fee() - fwd_fee;
  throw_unless(810, rest_amount > 0);

  ;; return last bid (if any)
  if (~ null?(curr_winner_addr)) {
    throw_unless(811, rest_amount > fwd_fee);
    return_bid_to_bidder(curr_winner_addr, curr_winner_bid - fwd_fee);
  }
  ;; return NFT back to owner
  var msg = begin_cell()
              .store_uint(0x10, 6) ;; nobounce
              .store_slice(nft_address)
              .store_coins(transfer_invoke_fee())
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::transfer(), 32)
              .store_uint(query_id, 64) 
              .store_slice(nft_owner_address) ;; new_owner_address
              .store_uint(0, 2) ;; response_address;
              .store_int(0, 1)  ;; empty custom_payload
              .store_coins(0)   ;; forward amount to new_owner_address
              .store_int(0, 1)  ;; empty forward_payload
            .end_cell();

  send_raw_message(msg, 1);

  save_data(marketplace_address, nft_address, nft_owner_address,
            marketplace_fee_params, royalty_params,
            auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong, 
            min_bid_value, max_bid_value, bid_step_value,
            curr_winner_addr, curr_winner_bid,
            -1, -1);

  return ();
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    var (marketplace_address, nft_address, nft_owner_address, 
         marketplace_fee_params, royalty_params, auction_params) = load_data();
    var initialized? = nft_owner_address.slice_bits() > 2; ;; not initialized if null address
    var (auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
         min_bid_value, max_bid_value, bid_step_value,
         curr_winner_address, curr_winner_bid,
         finished?, cancelled?) = load_auction_data(auction_params, initialized?);

    if (~ initialized?) {
      ;; deploy auction from marketplace: accept coins
      if (equal_slices(sender_address, marketplace_address)) {
         return ();
      }
      ;; first call must be from NFT item
      throw_unless(500, equal_slices(sender_address, nft_address));

      int op = in_msg_body~load_uint(32);
      throw_unless(501, op == op::ownership_assigned());

      int query_id = in_msg_body~load_uint(64);
      slice prev_owner_address = in_msg_body~load_msg_addr();

      save_data(marketplace_address, nft_address, prev_owner_address,
                marketplace_fee_params, royalty_params,
                auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
                min_bid_value, max_bid_value, bid_step_value,
                null(), 0,
                0, 0);

      return ();
    }

    ;; gas safeguard
    throw_unless(447, msg_value >= min_gas_amount());

    ;; check time is up
    int time_up? = null?(auction_finish_time) ? 0 : (now() > auction_finish_time);
    if (time_up?) {
      ;; return bid back to sender
      return_bid_to_sender(sender_address);

      if (~ finished?) {
        ;; auction not finished yet: finish him
        finish_auction(my_balance, fwd_fee, 0,
                       marketplace_address, nft_address, nft_owner_address,
                       marketplace_fee_params, royalty_params,
                       auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
                       min_bid_value, max_bid_value, bid_step_value,
                       curr_winner_address, curr_winner_bid, 
                       finished?);
      }
      
      return ();
    }

    ;; simple transfer - make a bid
    if (in_msg_body.slice_empty?()) {
      bid(my_balance, msg_value, fwd_fee, 0, 
          marketplace_address, nft_address, nft_owner_address,
          marketplace_fee_params, royalty_params,
          sender_address,
          auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
          min_bid_value, max_bid_value, bid_step_value,
          curr_winner_address, curr_winner_bid,
          finished?);

      return ();
    }

    int op = in_msg_body~load_uint(32);
    if (op == 1) { ;; just accept coins
      return ();
    }
    int query_id = in_msg_body~load_uint(64);

    ;; make a bid
    if (op == op::auction_bid()) { 
      bid(my_balance, msg_value, fwd_fee, query_id, 
          marketplace_address, nft_address, nft_owner_address,
          marketplace_fee_params, royalty_params,
          sender_address,
          auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
          min_bid_value, max_bid_value, bid_step_value,
          curr_winner_address, curr_winner_bid,
          finished?);

      return ();
    }

    ;; cancel auction
    if (op == op::auction_cancel()) {
      throw_if(600, finished?);
      throw_unless(458, equal_slices(sender_address, nft_owner_address) |
                        equal_slices(sender_address, marketplace_address));
      cancel_auction(my_balance, fwd_fee, query_id, 
                     marketplace_address, nft_address, nft_owner_address,
                     marketplace_fee_params, royalty_params,
                     auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
                     min_bid_value, max_bid_value, bid_step_value,
                     curr_winner_address, curr_winner_bid,
                     finished?);

      return ();
    }

    ;; manually finish auction
    if (op == op::auction_finish()) {
      throw_if(600, finished?);
      throw_unless(478, equal_slices(sender_address, nft_owner_address));
      finish_auction(my_balance, fwd_fee, query_id,
                     marketplace_address, nft_address, nft_owner_address, 
                     marketplace_fee_params, royalty_params,
                     auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
                     min_bid_value, max_bid_value, bid_step_value,
                     curr_winner_address, curr_winner_bid,
                     finished?);

      return ();
    }

    throw(0xffff);
}


() recv_external(slice in_msg) impure {
}


;; GET methods

var get_general_data() method_id {
  var (marketplace_address, nft_address, nft_owner_address,
       _, _, _) = load_data();

  return (marketplace_address, nft_address, nft_owner_address);
}


var get_royalty_data() method_id {
  var (_, _, _, _, royalty_params, _) = load_data();
  var (royalty_address, royalty_numer, royalty_denom) = load_fees(royalty_params);

  return (royalty_address, royalty_numer, royalty_denom);
}


var get_marketplace_fee_data() method_id {
  var (_, _, _, marketplace_fee_params, _, _) = load_data();
  var (marketplace_fee_address, marketplace_fee_numer, marketplace_fee_denom) = load_fees(marketplace_fee_params);

  return (marketplace_fee_address, marketplace_fee_numer, marketplace_fee_denom);
}


var get_auction_data() method_id {
  var (_, _, nft_owner_address, _, _, auction_params) = load_data();
  var initialized? = nft_owner_address.slice_bits() > 2;
  var (auction_finish_time, auction_salt, sniper_before_time, sniper_after_prolong,
       min_bid_value, max_bid_value, bid_step_value,
       curr_winner_address, curr_winner_bid,
       finished?, cancelled?) = load_auction_data(auction_params, initialized?);

  return (auction_finish_time, now(), auction_salt, sniper_before_time, sniper_after_prolong,
          min_bid_value, max_bid_value, bid_step_value,
          curr_winner_address, curr_winner_bid,
          finished?, cancelled?);
}
