#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

// Parameters
{{ script_name }} =: script_name

{{ seed_id }} =: seed_id  // seed_id

{{ generate_private_key }} =: generate_private_key  // generate_private_key

{{ pk_file }} =: pk_file  // private key filename

{{ wc }} parse-workchain-id =: wc  // wc

{{ secret_path }} =: secret_path 

// portal user out path
{{ out_path }} =: out_path
{{ out_path }} {{ user_id }} +"/" $+ =: user_out_path  

// file path prefix
user_out_path script_name $+ {{ ts }} $+ =: file_base


// code
out_path +"simple-wallet-code.fif" include =: contract_code

generate_private_key 
{ user_out_path pk_file $+ load-generate-keypair } 
{ secret_path pk_file $+ load-keypair } cond
=: provider_priv =: provider_pub

// data
<b 
    0 32 u,           // seqno
    provider_pub B,     // public key
    seed_id 32 u,     // seed_id id
b> =: contract_data

// create StateInit = (flags, code, data, libs)
<b 
   b{0011} s, 
   contract_code ref, 
   contract_data ref,
   null dict,
b> =: state_init

// create smart contract address = hash(StateInit)
state_init hashu wc swap 2dup 2constant smc_addr
."Smart contract address: " 2dup .addr cr
2dup file_base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 5 .Addr cr
."Bounceable address (for later access): " 4 .Addr cr

// initial message + signing
<b
   0 32 u, // first seqno = 0
b> =: init_message
init_message hashu provider_priv ed25519_sign_uint =: signature

// final external query to blockchain
<b 
   b{1000100} s,
   smc_addr addr,
   b{000010} s,
   state_init <s s,
   b{0} s,
   signature B,
   init_message <s s,
b> =: external_message

external_message 2 boc+>B
file_base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr

cr ."Address:" cr smc_addr 4 .Addr cr cr
