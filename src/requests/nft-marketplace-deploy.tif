{{ script_name }} =: script_name

// Params

// wallet seqno
{{ seqno }} =: seqno

// secret path
{{ secret_path }} =: secret_path 

// in nanotons, dft 50000000
{{ market_init_ng }} =: market_init_ng  

// addresses

{{ wallet_address }} dup =: wallet_address $>smca 0= abort"bad address"
=: wallet_flags
=: wallet_addr
=: wallet_wc

{{ owner_address }} dup =: owner_address $>smca 0= abort"bad address"
=: owner_flags
=: owner_addr
=: owner_wc

// file path prefix
{{ out_path }} script_name $+ {{ ts }} $+ =: file_base
secret_path +"/wallet.pk" load-keypair nip =: wallet_pk
0 =: market_wc
3 =: send_mode


// --------------------- Marketplace contract state init ---------------------

// code
{{ out_path }} +"nft-marketplace-code.fif" include =: marketplace_code

// data
<b
   b{100} s, owner_wc 8 i, owner_addr 256 u, // owner address
b> =: marketplace_data

// create StateInit = (flags, code, data, libs)
<b
   b{00110} s, 
   marketplace_code ref, 
   marketplace_data ref,
b> =: marketplace_state_init
marketplace_state_init ."StateInit: " cr <s csr. cr

// create smart contract address = hash(StateInit)
marketplace_state_init hashu market_wc swap 2dup 2constant marketplace_addr
."Smart contract address: " 2dup .addr cr
2dup file_base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 5 .Addr cr
."Bounceable address (for later access): " 4 .Addr cr


// --------------------- Internal message body from Wallet to Contract ---------------------

<b
   // int_msg_info, ihr_disabled, bounce, bounced, src_address (to be filled by server)
   b{010000} s, 

   // to_address: address prefix, wc, address
   b{100} s,
   marketplace_addr addr,

   // init coints + type
   market_init_ng Gram,
   b{0} s,

   // ihr_fee, fwd_fee, created_lt, created_at: 4 + 4 + 64 + 32 = 104 (to be filled by server)
   0 104 u,

   // marketplace state init (include as ref) - 11, no body - 0
   b{110} s,
   marketplace_state_init ref,
b> =: request_body
