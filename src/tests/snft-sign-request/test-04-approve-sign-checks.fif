// Test #04. Approve sign request via simple transaction. 

"test-00-header.fif" include


// 'https://pics.com/pdurovsign.png' - sign content
"aHR0cHM6Ly9waWNzLmNvbS9wZHVyb3ZzaWduLnBuZw==" =: content

"EQBPgLTB_RHxxXpwLjCUMzHjsvYjdR3dHFfWs765ZpbvOAmn" dup =: object_address $>smca 0= abort"bad address"
=: object_flags
=: object_addr
=: object_wc

"EQART9XH37phxxDoNGmcKc7t9AS4iR76HPj2Oj0dgSY824RZ" dup =: signee_address $>smca 0= abort"bad address"
=: signee_flags
=: signee_addr
=: signee_wc

"EQA0eAnNwbhm3K0hcJuwdo3ijBcDsSWTkYmxmX1KNtQZzg68" dup =: other_address $>smca 0= abort"bad address"
=: other_flags
=: other_addr
=: other_wc

"EQDK-Qt00761ArsHAK5MevbckLBxyHMmjpUEJ4cHWMKOYsZB" dup =: provider_address $>smca 0= abort"bad address"
=: provider_flags
=: provider_addr
=: provider_wc


<b
   b{100} s, signee_wc 8 i, signee_addr 256 u,     // signee_address
   b{100} s, object_wc 8 i, object_addr 256 u,     // sign_object_address
   b{100} s, provider_wc 8 i, provider_addr 256 u, // sign_provider_address
   2000000000 Gram,  // sign_commit_fee
   9000000000 Gram,  // min_stake
   1 16 u,           // network_id
   123456 96 u,      // network_address
   0 1 i,            // approved
   <b  // content
      0x01 8 u, // offchain prefix 
      content base64>B B, // content URI
   b> ref,
   <b b> ref,        // message
b> =: state


// ------------------------ Case 1: Wrong prefix 1st char ----------------------

<b
   b{0100} s, // flags: int_msg_info, ihr_disabled, bounce, bounced
   b{100} s, signee_wc 8 i, signee_addr 256 u, // sender address
b> =: in_msg_full


<b
   0 32 u, // op code
   "$" $,  // message
b> <s =: in_msg_body

my_balance
0
in_msg_full
in_msg_body
recv_internal 
code
state
c7
runvmctx 

=: state
=: exit_code

exit_code .dump cr
exit_code 333 "Wrong exit code: 333 expected" ASSERT_EQUAL_INTS

exit_code ."Exit code " exit_code .dump cr 


// ------------------------ Case 2: Wrong prefix ----------------------

<b
   b{0100} s, // flags: int_msg_info, ihr_disabled, bounce, bounced
   b{100} s, signee_wc 8 i, signee_addr 256 u, // sender address
b> =: in_msg_full

<b
   0 32 u,      // op code
   "~SIGM~" $,  // message
b> <s =: in_msg_body

my_balance
0
in_msg_full
in_msg_body
recv_internal 
code
state
c7
runvmctx 

=: state
=: exit_code

exit_code .dump cr
exit_code 334 "Wrong exit code: 334 expected" ASSERT_EQUAL_INTS

exit_code ."Exit code " exit_code .dump cr 


// ------------------------ Case 3: Wrong sender ----------------------

<b
   b{0100} s, // flags: int_msg_info, ihr_disabled, bounce, bounced
   b{100} s, other_wc 8 i, other_addr 256 u, // sender address
b> =: in_msg_full

<b
   0 32 u,      // op code
   "~SIGN~" $,  // message
b> <s =: in_msg_body

my_balance
0
in_msg_full
in_msg_body
recv_internal 
code
state
c7
runvmctx 

=: state
=: exit_code

exit_code .dump cr
exit_code 400 "Wrong exit code: 400 expected" ASSERT_EQUAL_INTS

exit_code ."Exit code " exit_code .dump cr 


// ------------------------ Case 4: Already approved ----------------------

<b
   b{100} s, signee_wc 8 i, signee_addr 256 u,     // signee_address
   b{100} s, object_wc 8 i, object_addr 256 u,     // sign_object_address
   b{100} s, provider_wc 8 i, provider_addr 256 u, // sign_provider_address
   2000000000 Gram,  // sign_commit_fee
   9000000000 Gram,  // min_stake
   1 16 u,           // network_id
   123456 96 u,      // network_address
   -1 1 i,           // approved
   <b  // content
      0x01 8 u, // offchain prefix 
      content base64>B B, // content URI
   b> ref,
   <b b> ref,        // message
b> =: state

<b
   b{0100} s, // flags: int_msg_info, ihr_disabled, bounce, bounced
   b{100} s, signee_wc 8 i, signee_addr 256 u, // sender address
b> =: in_msg_full

<b
   0 32 u,      // op code
   "~SIGN~" $,  // message
b> <s =: in_msg_body

my_balance
0
in_msg_full
in_msg_body
recv_internal 
code
state
c7
runvmctx 

=: state
=: exit_code

exit_code 402 "Wrong exit code: 402 expected" ASSERT_EQUAL_INTS

exit_code ."Exit code " exit_code .dump cr


// ------------------------ Case 5: Insufficient balance ----------------------

<b
   b{100} s, signee_wc 8 i, signee_addr 256 u,     // signee_address
   b{100} s, object_wc 8 i, object_addr 256 u,     // sign_object_address
   b{100} s, provider_wc 8 i, provider_addr 256 u, // sign_provider_address
   2000000000 Gram,  // sign_commit_fee
   9000000000 Gram,  // min_stake
   1 16 u,           // network_id
   123456 96 u,      // network_address
   0 1 i,            // approved
   <b  // content
      0x01 8 u, // offchain prefix 
      content base64>B B, // content URI
   b> ref,
   <b b> ref,        // message
b> =: state

<b
   b{0100} s, // flags: int_msg_info, ihr_disabled, bounce, bounced
   b{100} s, signee_wc 8 i, signee_addr 256 u, // sender address
b> =: in_msg_full

<b
   0 32 u,      // op code
   "~SIGN~" $,  // message
b> <s =: in_msg_body



11000000000 =: my_balance
0 tuple 0x076ef1ea , // magic
0 , 0 , // actions msg_sents
1570998536 , // unix_time
1 , 1 , 3 , // block_lt, trans_lt, rand_seed
0 tuple my_balance , dictnew , , // remaining balance
contract_address , dictnew , // contract_address, global_config
1 tuple // wrap to another tuple
=: c7


my_balance
0
in_msg_full
in_msg_body
recv_internal 
code
state
c7
runvmctx 

=: state
=: exit_code

exit_code 403 "Wrong exit code: 403 expected" ASSERT_EQUAL_INTS

exit_code ."Exit code " exit_code .dump cr
