1. python: work with addresses
https://github.com/toncenter/pytonlib/blob/main/pytonlib/utils/address.py

3. *.fc files: fees review

4. python: bitstring --> bitarray  compare

5. *fif: 
   item_ng Gram,
   b{0} s,   <-----------   do we need it ???

7. *.fc: why first two parameters in
recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body)
?

8. in SNFT-* - do we need it?
if (in_msg_body.slice_empty?()) { ;; simple money transfer
      return ();
    }  

9.   wallet_address: 'EQAWYHnDf8qmG9mC1CGD1Svf9_9OjWpDgL9EU2fgsTrfH5jG'
  sign_provider_address: 'kQALMaIEwGADZD-K13tjJK_JUcCshWVFxtgFEiNGXKXYV0vl'
  Figure out all about addresses!!! (kQA -> EQA... etc.)

10. TON HTTP API - may be it caches same queries? Use pyTON instead
10.1 Quickly call withraw with amount=19000000,amount=12000000,amount=17000000,... Some middle trans could be lost. Why?
     Test with seqno awaiting.

11. py: contract address - correct implementation

12 fc: why chain: wallet (1)--> smc1 (2)--> smc2 fails at (2) if (1) passes 0 coins? 
       (even if there are sufficient coins on snc1)

----------------------

1. change sign_provider  -> can be done by current sign_provider - probably security flaw! need review

2. add sign notification to item's owner

3. test just send money to all smc-s from wallet
